backend/
├── src/
│   │
│   ├── main.cpp                            # Point d'entrée C++, initialisation
│   │
│   ├── midi/                               # ═══════════════════════════════
│   │   │                                   # MODULES MIDI CORE
│   │   │                                   # ═══════════════════════════════
│   │   │
│   │   ├── devices/                        # Gestion périphériques MIDI
│   │   │   ├── DeviceInfo.h                # Structure info device (ID, nom, type)
│   │   │   ├── DevicePlugin.h              # Interface plugin périphériques (extensibilité)
│   │   │   ├── MidiDevice.h                # Classe abstraite périphérique MIDI
│   │   │   ├── MidiDeviceManager.h/.cpp    # Gestionnaire périphériques (scan, connexion)
│   │   │   ├── UsbMidiDevice.h/.cpp        # Périphérique USB MIDI (ALSA)
│   │   │   ├── BleMidiDevice.h/.cpp        # Périphérique Bluetooth LE MIDI
│   │   │   └── WifiMidiDevice.h            # Périphérique WiFi MIDI (plugin)
│   │   │
│   │   ├── file/                           # Gestion fichiers MIDI
│   │   │   ├── MidiFileReader.h/.cpp       # Lecteur fichiers MIDI (SMF 0/1/2)
│   │   │   ├── MidiFileWriter.h/.cpp       # Écriture fichiers MIDI
│   │   │   └── MidiFileAnalyzer.h/.cpp     # Analyse métadonnées
│   │   │
│   │   ├── player/                         # Lecteur MIDI temps réel
│   │   │   ├── MidiPlayer.h/.cpp           # Player principal (play/pause/stop)
│   │   │   ├── MidiEventScheduler.h        # Ordonnancement événements précis
│   │   │   ├── MidiFileLoader.h            # Chargement/parsing fichiers
│   │   │   ├── MidiTrackManager.h          # Gestion pistes (mute/solo)
│   │   │   ├── MidiTransportControl.h      # Contrôles transport (seek, loop)
│   │   │   ├── PlaybackEngine.h/.cpp       # Moteur lecture avancé 
│   │   │   └── TransportController.h/.cpp  # Contrôles avancés 
│   │   │
│   │   ├── processing/                     # Processeurs MIDI temps réel
│   │   │   ├── basic/                      # Processeurs de base
│   │   │   │   ├── ChannelFilterProcessor.h    # Filtrage par canal
│   │   │   │   ├── NoteFilterProcessor.h       # Filtrage par plage notes
│   │   │   │   ├── TransposeProcessor.h        # Transposition notes
│   │   │   │   └── VelocityProcessor.h         # Modification vélocité
│   │   │   │
│   │   │   ├── creative/                   # Processeurs créatifs
│   │   │   │   ├── ArpeggiatorProcessor.h/.cpp # Arpégiateur
│   │   │   │   ├── ChordProcessor.h            # Générateur accords
│   │   │   │   ├── DelayProcessor.h/.cpp       # Délai MIDI (echo)
│   │   │   │   └── HarmonizerProcessor.h       # Harmoniseur automatique
│   │   │   │
│   │   │   ├── MidiProcessor.h             # Interface abstraite processeur
│   │   │   ├── ProcessorChain.h            # Chaîne processeurs série
│   │   │   └── ProcessorManager.h/.cpp     # Gestionnaire processeurs
│   │   │
│   │   ├── routing/                        # Routage MIDI intelligent
│   │   │   ├── ISchedulingStrategy.h       # Interface stratégies ordonnancement
│   │   │   ├── PriorityQueueScheduler.h/.cpp # Ordonnanceur file priorité
│   │   │   └── RingBufferScheduler.h       # Ordonnanceur ring buffer (lock-free)
│   │   │
│   │   ├── sysex/                          # Support messages System Exclusive
│   │   │   ├── CCCapabilities.h            # Capacités CC (MIDI Learn)
│   │   │   ├── CustomDeviceIdentity.h      # Identité périphérique custom
│   │   │   ├── CustomSysExParser.h/.cpp    # Parser SysEx personnalisé
│   │   │   ├── CustomSysExProtocol.h       # Protocole SysEx custom
│   │   │   ├── CustomSysExTypes.h          # Types SysEx custom
│   │   │   ├── NoteMap.h                   # Mapping notes personnalisé
│   │   │   ├── SyncClock.h                 # Synchronisation horloge
│   │   │   ├── DeviceIdentity.h            # Identification périphériques
│   │   │   ├── ManufacturerDatabase.h      # Base constructeurs MIDI
│   │   │   ├── SysExBuilder.h              # Construction messages SysEx
│   │   │   ├── SysExHandler.h/.cpp         # Traitement messages SysEx
│   │   │   ├── SysExMessage.h              # Représentation messages SysEx
│   │   │   ├── SysExParser.h/.cpp          # Parsing messages SysEx
│   │   │   └── UniversalSysEx.h            # Messages SysEx universels (MMC, MTC)
│   │   │
│   │   ├── MidiRouter.h/.cpp               # 🔧 Routage intelligent + compensation instrument
│   │   ├── JsonMidiConverter.h/.cpp        # Conversion MIDI ↔ JSON
│   │   ├── MidiFileManager.h/.cpp          # Gestion fichiers (indexation, cache)
│   │   ├── MidiClock.h/.cpp                # Horloge MIDI (tempo, sync)
│   │   ├── MidiMessage.h/.cpp              # Représentation messages MIDI
│   │   ├── MidiFileStructures.h            # Structures données fichiers MIDI
│   │   ├── MidiTransforms.h/.cpp           # Transformations MIDI
│   │   └── MidiValidator.h/.cpp            # Validation messages MIDI
│   │
│   ├── network/                            # ═══════════════════════════════
│   │   │                                   # MODULES RÉSEAU
│   │   │                                   # ═══════════════════════════════
│   │   │
│   │   ├── bluetooth/                      # Support Bluetooth MIDI
│   │   │   └── BleMidiDevice.h/.cpp        # Périphérique BLE MIDI
│   │   │
│   │   ├── discovery/                      # Découverte réseau automatique
│   │   │   ├── MdnsDiscovery.h/.cpp        # Découverte mDNS/Bonjour
│   │   │   └── ServiceInfo.h               # Informations service réseau
│   │   │
│   │   ├── rtpmidi/                        # RTP-MIDI (Apple Network MIDI)
│   │   │   ├── RtpMidiServer.h/.cpp        # Serveur RTP-MIDI
│   │   │   ├── RtpMidiSession.h/.cpp       # Session RTP-MIDI
│   │   │   └── RtpPacket.h                 # Paquets RTP
│   │   │
│   │   ├── wifi/                           # Point d'accès WiFi
│   │   │   └── WiFiHotspot.h/.cpp          # Hotspot WiFi (mode AP)
│   │   │
│   │   ├── BluetoothManager.h/.cpp         # Gestionnaire Bluetooth
│   │   ├── WifiManager.h/.cpp              # Gestionnaire WiFi
│   │   └── NetworkManager.h/.cpp           # Gestionnaire réseau global
│   │
│   ├── core/                               # ═══════════════════════════════
│   │   │                                   # MODULES SYSTÈME FONDAMENTAUX
│   │   │                                   # ═══════════════════════════════
│   │   │
│   │   ├── commands/                       # Pattern Command pour API
│   │   │   └── CommandFactory.h            # Factory création commandes
│   │   │
│   │   ├── documentation/                  # Génération documentation
│   │   │   └── CommandDocumentation.h      # Documentation API auto-générée
│   │   │
│   │   ├── interfaces/                     # Interfaces abstraites
│   │   │   └── ICommand.h                  # Interface commande API
│   │   │
│   │   ├── optimisation/                   # Optimisations performances
│   │   │   ├── LockFreeQueue.h             # File thread-safe sans mutex
│   │   │   ├── MemoryPool.h/.cpp           # Pool mémoire pré-allouée
│   │   │   ├── ObjectPool.h                # Pool objets réutilisables
│   │   │   ├── PerformanceOptimizer.h/.cpp # Optimiseur performances
│   │   │   └── ThreadPool.h/.cpp           # Pool threads réutilisables
│   │   │
│   │   ├── patterns/                       # Design patterns
│   │   │   ├── DIContainer.h               # Injection dépendances
│   │   │   └── Subject.h                   # Observer pattern
│   │   │
│   │   ├── Application.h/.cpp              # Classe application principale
│   │   ├── Config.h                        # Configuration globale (JSON)
│   │   ├── Error.h                         # Codes erreurs système
│   │   ├── ErrorManager.h                  # Gestionnaire erreurs
│   │   ├── EventBus.h/.cpp                 # Bus événements (pub/sub)
│   │   ├── ISerializable.h                 # Interface sérialisation JSON
│   │   ├── JsonValidator.h/.cpp            # Validateur JSON (sécurité API)
│   │   ├── Logger.h                        # Système logging multi-niveaux
│   │   ├── StringUtils.h                   # Utilitaires strings
│   │   └── TimeUtils.h                     # Utilitaires temps
│   │
│   ├── storage/                            # ═══════════════════════════════
│   │   │                                   # PERSISTANCE DONNÉES
│   │   │                                   # ═══════════════════════════════
│   │   │
│   │   ├── Database.h/.cpp                 # Wrapper SQLite (requêtes, transactions)
│   │   ├── FileManager.h/.cpp              # 🔧 UNIFIÉ: Gestion fichiers complète
│   │   │                                   #     (absorbe FileSystem.h v4.0.3)
│   │   │                                   #     FileManager::Unsafe:: (rapide, interne)
│   │   │                                   #     FileManager::Safe:: (sécurisé, public)
│   │   │
│   │   ├── InstrumentDatabase.h/.cpp       # ✨ NOUVEAU: CRUD profils instruments
│   │   │                                   #     Gestion table instruments_latency
│   │   │                                   #     Cache mémoire profils
│   │   │
│   │   ├── PathManager.h/.cpp              # Gestion chemins (résolution, validation)
│   │   ├── SessionManager.h/.cpp           # Gestion sessions (état application)
│   │   ├── PresetManager.h/.cpp            # Gestion presets routing
│   │   └── Settings.h/.cpp                 # Paramètres utilisateur
│   │
│   ├── timing/                             # ═══════════════════════════════
│   │   │                                   # TIMING & SYNCHRONISATION
│   │   │                                   # ═══════════════════════════════
│   │   │
│   │   ├── LatencyCompensator.h/.cpp       # 🔧 AMÉLIORÉ: Compensation par instrument
│   │   │                                   #     DeviceLatencyProfile (existant)
│   │   │                                   #     InstrumentLatencyProfile (nouveau)
│   │   │                                   #     Persistance automatique
│   │   │
│   │   ├── InstrumentLatencyProfile.h      # ✨ NOUVEAU: Profil latence instrument
│   │   │                                   #     instrumentId, deviceId, channel
│   │   │                                   #     intrinsicLatency, transportLatency
│   │   │                                   #     totalCompensation, history
│   │   │
│   │   ├── CalibrationEngine.h/.cpp        # ✨ NOUVEAU: Calibration semi-automatique
│   │   │                                   #     Wizard guidé
│   │   │                                   #     Mesure automatique par instrument
│   │   │                                   #     Validation sync score
│   │   │
│   │   └── TimestampManager.h/.cpp         # Gestionnaire timestamps haute précision
│   │
│   ├── utils/                              # ═══════════════════════════════
│   │   │                                   # UTILITAIRES
│   │   │                                   # ═══════════════════════════════
│   │   │
│   │   ├── ResourceMonitor.h/.cpp          # Monitoring ressources système
│   │   └── Preset.h                        # Gestion presets de routage
│   │
│   ├── loop/                               # ═══════════════════════════════
│   │   │                                   # SYSTÈME DE LOOPS
│   │   │                                   # ═══════════════════════════════
│   │   │
│   │   └── LoopManager.h/.cpp              # Gestionnaire loops/repeat
│   │
│   ├── database/                           # ═══════════════════════════════
│   │   │                                   # SCHÉMA DATABASE
│   │   │                                   # ═══════════════════════════════
│   │   │
│   │   ├── migrations/                     # Migrations SQL versionnées
│   │   │   ├── 001_initial.sql             # Tables de base
│   │   │   ├── 002_add_routing.sql         # Tables routing
│   │   │   ├── 003_add_jsonmidi.sql        # Tables JSON MIDI
│   │   │   ├── 004_create_settings_table.sql # Table settings
│   │   │   └── 005_instruments_latency.sql # ✨ NOUVEAU: Table profils instruments
│   │   │
│   │   └── schema.sql                      # Schéma complet (référence)
│   │
│   ├── monitoring/                         # ═══════════════════════════════
│   │   │                                   # MONITORING SYSTÈME
│   │   │                                   # ═══════════════════════════════
│   │   │
│   │   ├── HealthCheck.h/.cpp              # Vérification santé système
│   │   ├── LatencyMonitor.h/.cpp           # Surveillance latence MIDI
│   │   ├── MetricsCollector.h/.cpp         # Collection métriques (CPU, RAM)
│   │   ├── PerformanceMetrics.h            # Définition métriques
│   │   └── SystemMonitor.h/.cpp            # Monitoring global
│   │
│   └── api/                                # ═══════════════════════════════
│       │                                   # API WEBSOCKET & COMMANDES
│       │                                   # ═══════════════════════════════
│       │
│       ├── observers/                      # Observers API
│       │   └── IApiServerObserver.h        # Interface observer serveur
│       │
│       ├── commands/                       # Commandes API WebSocket
│       │   ├── devices.cpp                 # Commandes périphériques MIDI
│       │   ├── editor.cpp                  # Commandes éditeur
│       │   ├── files.cpp                   # Commandes fichiers MIDI
│       │   ├── instruments.cpp             # Commandes instruments
│       │   ├── latency.cpp                 # ✨ NOUVEAU: Commandes latence/calibration
│       │   │                               #     latency.calibrate_instrument
│       │   │                               #     latency.set_instrument_compensation
│       │   │                               #     latency.get_dashboard
│       │   │                               #     latency.get_sync_score
│       │   │                               #     latency.recalibrate_all
│       │   │
│       │   ├── logger.cpp                  # Commandes logging
│       │   ├── loops.cpp                   # Commandes loops
│       │   ├── network.cpp                 # Commandes réseau
│       │   ├── playback.cpp                # Commandes lecture MIDI
│       │   ├── processing.cpp              # Commandes processeurs MIDI
│       │   ├── routing.cpp                 # Commandes routage MIDI
│       │   └── system.cpp                  # Commandes système
│       │
│       ├── editor/                         # État éditeur
│       │   └── EditorState.h/.cpp          # Gestion état éditeur (optionnel)
│       │
│       ├── ApiServer.h/.cpp                # Serveur WebSocket
│       ├── CommandProcessorV2.h/.cpp       # 🔧 Processeur commandes (étendu)
│       ├── MessageEnvelope.h/.cpp          # Enveloppe messages API
│       └── Protocol.h                      # Définition protocole API
│
├── docs/                                   # ═══════════════════════════════
│   │                                       # DOCUMENTATION
│   │                                       # ═══════════════════════════════
│   │
│   ├── api/                                # Documentation API
│   │   ├── commands_reference.md           # Référence commandes
│   │   ├── websocket_protocol.md           # Protocole WebSocket
│   │   └── latency_api.md                  # ✨ NOUVEAU: Documentation API latence
│   │
│   ├── architecture/                       # Documentation architecture
│   │   ├── backend_overview.md             # Vue d'ensemble backend
│   │   ├── latency_system.md               # ✨ NOUVEAU: Système latence v4.1.0
│   │   ├── storage_system.md               # Système storage unifié
│   │   └── midi_routing.md                 # Routage MIDI intelligent
│   │
│   ├── guides/                             # Guides utilisateurs
│   │   ├── calibration_guide.md            # ✨ NOUVEAU: Guide calibration
│   │   ├── setup_guide.md                  # Guide installation
│   │   └── troubleshooting.md              # Dépannage
│   │
│   └── development/                        # Documentation développeurs
│       ├── build_instructions.md           # Instructions compilation
│       ├── coding_standards.md             # Standards de code
│       └── testing_guide.md                # Guide tests
│
└── config/                                 # ═══════════════════════════════
    │                                       # CONFIGURATION
    │                                       # ═══════════════════════════════
    │
    ├── config.json                         # Configuration principale
    │                                       # {
    │                                       #   "server": { "port": 8080 },
    │                                       #   "midi": { "buffer_size": 256 },
    │                                       #   "latency": {  ← ✨ NOUVEAU
    │                                       #     "auto_calibration": true,
    │                                       #     "calibration_interval": 300,
    │                                       #     "default_compensation": 0
    │                                       #   }
    │                                       # }
    │
    ├── default_routes.json                 # Routes par défaut
    ├── latency_profiles.json               # ✨ NOUVEAU: Profils latence (backup JSON)
    │
    └── presets/                            # Presets routing prédéfinis
        ├── lead_synth.json                 # Preset synthé lead
        ├── piano_strings.json              # Preset piano + strings
        └── full_orchestra.json             # Preset orchestre complet