/home/pi/midiMind/backend/src/api/../core/commands/CommandFactory.h:85:10: note: candidate: ‘void midiMind::CommandFactory::registerCommand(const std::string&, CommandExecutor)’
   85 |     void registerCommand(const std::string& name, CommandExecutor executor) {
      |          ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/../core/commands/CommandFactory.h:85:10: note:   candidate expects 2 arguments, 3 provided
/home/pi/midiMind/backend/src/api/../core/commands/CommandFactory.h:103:10: note: candidate: ‘void midiMind::CommandFactory::registerCommand(const std::string&, std::shared_ptr<midiMind::ICommand>)’
  103 |     void registerCommand(const std::string& name, std::shared_ptr<ICommand> command) {
      |          ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/../core/commands/CommandFactory.h:103:10: note:   candidate expects 2 arguments, 3 provided
/home/pi/midiMind/backend/src/api/commands/files.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/files.cpp:517:45: error: ‘using std::__shared_ptr_access<midiMind::MidiFileManager, __gnu_cxx::_S_atomic, false, false>::element_type = class midiMind::MidiFileManager’ {aka ‘class midiMind::MidiFileManager’} has no member named ‘getById’
  517 |                 auto fileOpt = fileManager->getById(fileId);
      |                                             ^~~~~~~
/home/pi/midiMind/backend/src/api/commands/files.cpp:527:46: error: ‘using std::__shared_ptr_access<midiMind::MidiFileManager, __gnu_cxx::_S_atomic, false, false>::element_type = class midiMind::MidiFileManager’ {aka ‘class midiMind::MidiFileManager’} has no member named ‘loadAsJsonMidi’
  527 |                 json jsonMidi = fileManager->loadAsJsonMidi(fileId);
      |                                              ^~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/files.cpp: In function ‘void midiMind::registerFileCommands(CommandFactory&, std::shared_ptr<MidiFileManager>, std::shared_ptr<Database>)’:
/home/pi/midiMind/backend/src/api/commands/files.cpp:502:28: error: no matching function for call to ‘midiMind::CommandFactory::registerCommand(const char [14], midiMind::registerFileCommands(CommandFactory&, std::shared_ptr<MidiFileManager>, std::shared_ptr<Database>)::<lambda(const midiMind::json&)>, const char [28])’
  502 |     factory.registerCommand("files.analyze",
      |     ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~
  503 |         [fileManager](const json& params) -> json {
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  504 |             Logger::debug("FileAPI", "Analyzing file...");
      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  505 | 
      |                             
  506 |             try {
      |             ~~~~~           
  507 |                 if (!params.contains("file_id")) {
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  508 |                     return {
      |                     ~~~~~~~~
  509 |                         {"success", false},
      |                         ~~~~~~~~~~~~~~~~~~~
  510 |                         {"error", "Missing file_id parameter"}
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  511 |                     };
      |                     ~~      
  512 |                 }
      |                 ~           
  513 | 
      |                             
  514 |                 std::string fileId = params["file_id"];
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  515 | 
      |                             
  516 |                 // ✅ CORRECTION: getFileMetadata() → getById()
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  517 |                 auto fileOpt = fileManager->getById(fileId);
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  518 |                 if (!fileOpt.has_value()) {
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  519 |                     return {
      |                     ~~~~~~~~
  520 |                         {"success", false},
      |                         ~~~~~~~~~~~~~~~~~~~
  521 |                         {"error", "File not found"},
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  522 |                         {"error_code", "FILE_NOT_FOUND"}
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  523 |                     };
      |                     ~~      
  524 |                 }
      |                 ~           
  525 | 
      |                             
  526 |                 // Charger en JsonMidi pour analyse détaillée
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  527 |                 json jsonMidi = fileManager->loadAsJsonMidi(fileId);
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  528 | 
      |                             
  529 |                 Logger::info("FileAPI", "✓ File analyzed");
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  530 | 
      |                             
  531 |                 return {
      |                 ~~~~~~~~    
  532 |                     {"success", true},
      |                     ~~~~~~~~~~~~~~~~~~
  533 |                     {"data", jsonMidi}
      |                     ~~~~~~~~~~~~~~~~~~
  534 |                 };
      |                 ~~          
  535 | 
      |                             
  536 |             } catch (const std::exception& e) {
      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  537 |                 Logger::error("FileAPI",
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~
  538 |                     "Failed to analyze file: " + std::string(e.what()));
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  539 |                 return {
      |                 ~~~~~~~~    
  540 |                     {"success", false},
      |                     ~~~~~~~~~~~~~~~~~~~
  541 |                     {"error", e.what()},
      |                     ~~~~~~~~~~~~~~~~~~~~
  542 |                     {"error_code", "ANALYZE_FAILED"}
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  543 |                 };
      |                 ~~          
  544 |             }
      |             ~               
  545 |         },
      |         ~~                  
  546 |         "Analyze MIDI file structure"
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  547 |     );
      |     ~                       
/home/pi/midiMind/backend/src/api/../core/commands/CommandFactory.h:85:10: note: candidate: ‘void midiMind::CommandFactory::registerCommand(const std::string&, CommandExecutor)’
   85 |     void registerCommand(const std::string& name, CommandExecutor executor) {
      |          ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/../core/commands/CommandFactory.h:85:10: note:   candidate expects 2 arguments, 3 provided
/home/pi/midiMind/backend/src/api/../core/commands/CommandFactory.h:103:10: note: candidate: ‘void midiMind::CommandFactory::registerCommand(const std::string&, std::shared_ptr<midiMind::ICommand>)’
  103 |     void registerCommand(const std::string& name, std::shared_ptr<ICommand> command) {
      |          ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/../core/commands/CommandFactory.h:103:10: note:   candidate expects 2 arguments, 3 provided
/home/pi/midiMind/backend/src/api/commands/files.cpp:552:28: error: no matching function for call to ‘midiMind::CommandFactory::registerCommand(const char [13], midiMind::registerFileCommands(CommandFactory&, std::shared_ptr<MidiFileManager>, std::shared_ptr<Database>)::<lambda(const midiMind::json&)>, const char [18])’
  552 |     factory.registerCommand("files.search",
      |     ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~
  553 |         [fileManager](const json& params) -> json {
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  554 |             Logger::debug("FileAPI", "Searching files...");
      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  555 | 
      |                             
  556 |             try {
      |             ~~~~~           
  557 |                 if (!params.contains("query")) {
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  558 |                     return {
      |                     ~~~~~~~~
  559 |                         {"success", false},
      |                         ~~~~~~~~~~~~~~~~~~~
  560 |                         {"error", "Missing query parameter"}
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  561 |                     };
      |                     ~~      
  562 |                 }
      |                 ~           
  563 | 
      |                             
  564 |                 std::string query = params["query"];
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  565 | 
      |                             
  566 |                 auto results = fileManager->search(query);
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  567 | 
      |                             
  568 |                 json resultsJson = json::array();
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  569 |                 for (const auto& file : results) {
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  570 |                     resultsJson.push_back(file.toJson());
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  571 |                 }
      |                 ~           
  572 | 
      |                             
  573 |                 Logger::info("FileAPI",
      |                 ~~~~~~~~~~~~~~~~~~~~~~~
  574 |                     "✓ Search complete: " + std::to_string(results.size()) + " results");
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  575 | 
      |                             
  576 |                 return {
      |                 ~~~~~~~~    
  577 |                     {"success", true},
      |                     ~~~~~~~~~~~~~~~~~~
  578 |                     {"data", {
      |                     ~~~~~~~~~~
  579 |                         {"results", resultsJson},
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~
  580 |                         {"count", results.size()}
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~
  581 |                     }}
      |                     ~~      
  582 |                 };
      |                 ~~          
  583 | 
      |                             
  584 |             } catch (const std::exception& e) {
      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  585 |                 Logger::error("FileAPI",
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~
  586 |                     "Failed to search files: " + std::string(e.what()));
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  587 |                 return {
      |                 ~~~~~~~~    
  588 |                     {"success", false},
      |                     ~~~~~~~~~~~~~~~~~~~
  589 |                     {"error", e.what()},
      |                     ~~~~~~~~~~~~~~~~~~~~
  590 |                     {"error_code", "SEARCH_FAILED"}
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  591 |                 };
      |                 ~~          
  592 |             }
      |             ~               
  593 |         },
      |         ~~                  
  594 |         "Search MIDI files"
      |         ~~~~~~~~~~~~~~~~~~~ 
  595 |     );
      |     ~                       
/home/pi/midiMind/backend/src/api/../core/commands/CommandFactory.h:85:10: note: candidate: ‘void midiMind::CommandFactory::registerCommand(const std::string&, CommandExecutor)’
   85 |     void registerCommand(const std::string& name, CommandExecutor executor) {
      |          ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/../core/commands/CommandFactory.h:85:10: note:   candidate expects 2 arguments, 3 provided
/home/pi/midiMind/backend/src/api/../core/commands/CommandFactory.h:103:10: note: candidate: ‘void midiMind::CommandFactory::registerCommand(const std::string&, std::shared_ptr<midiMind::ICommand>)’
  103 |     void registerCommand(const std::string& name, std::shared_ptr<ICommand> command) {
      |          ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/../core/commands/CommandFactory.h:103:10: note:   candidate expects 2 arguments, 3 provided
/home/pi/midiMind/backend/src/api/commands/files.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/files.cpp:617:45: error: ‘using std::__shared_ptr_access<midiMind::MidiFileManager, __gnu_cxx::_S_atomic, false, false>::element_type = class midiMind::MidiFileManager’ {aka ‘class midiMind::MidiFileManager’} has no member named ‘getById’
  617 |                 auto fileOpt = fileManager->getById(fileId);
      |                                             ^~~~~~~
/home/pi/midiMind/backend/src/api/commands/files.cpp: In function ‘void midiMind::registerFileCommands(CommandFactory&, std::shared_ptr<MidiFileManager>, std::shared_ptr<Database>)’:
/home/pi/midiMind/backend/src/api/commands/files.cpp:600:28: error: no matching function for call to ‘midiMind::CommandFactory::registerCommand(const char [17], midiMind::registerFileCommands(CommandFactory&, std::shared_ptr<MidiFileManager>, std::shared_ptr<Database>)::<lambda(const midiMind::json&)>, const char [17])’
  600 |     factory.registerCommand("files.updateTags",
      |     ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~
  601 |         [fileManager](const json& params) -> json {
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  602 |             Logger::debug("FileAPI", "Updating tags...");
      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  603 | 
      |                             
  604 |             try {
      |             ~~~~~           
  605 |                 if (!params.contains("file_id") || !params.contains("tags")) {
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  606 |                     return {
      |                     ~~~~~~~~
  607 |                         {"success", false},
      |                         ~~~~~~~~~~~~~~~~~~~
  608 |                         {"error", "Missing file_id or tags parameter"}
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  609 |                     };
      |                     ~~      
  610 |                 }
      |                 ~           
  611 | 
      |                             
  612 |                 std::string fileId = params["file_id"];
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  613 |                 std::vector<std::string> tags = params["tags"].get<std::vector<std::string>>();
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  614 | 
      |                             
  615 |                 // Vérifier que le fichier existe
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  616 |                 // ✅ CORRECTION: getFileMetadata() → getById()
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  617 |                 auto fileOpt = fileManager->getById(fileId);
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  618 |                 if (!fileOpt.has_value()) {
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  619 |                     return {
      |                     ~~~~~~~~
  620 |                         {"success", false},
      |                         ~~~~~~~~~~~~~~~~~~~
  621 |                         {"error", "File not found"},
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  622 |                         {"error_code", "FILE_NOT_FOUND"}
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  623 |                     };
      |                     ~~      
  624 |                 }
      |                 ~           
  625 | 
      |                             
  626 |                 bool success = fileManager->updateTags(fileId, tags);
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  627 | 
      |                             
  628 |                 if (!success) {
      |                 ~~~~~~~~~~~~~~~
  629 |                     return {
      |                     ~~~~~~~~
  630 |                         {"success", false},
      |                         ~~~~~~~~~~~~~~~~~~~
  631 |                         {"error", "Failed to update tags"},
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  632 |                         {"error_code", "UPDATE_FAILED"}
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  633 |                     };
      |                     ~~      
  634 |                 }
      |                 ~           
  635 | 
      |                             
  636 |                 Logger::info("FileAPI", "✓ Tags updated");
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  637 | 
      |                             
  638 |                 return {
      |                 ~~~~~~~~    
  639 |                     {"success", true},
      |                     ~~~~~~~~~~~~~~~~~~
  640 |                     {"message", "Tags updated successfully"}
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  641 |                 };
      |                 ~~          
  642 | 
      |                             
  643 |             } catch (const std::exception& e) {
      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  644 |                 Logger::error("FileAPI",
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~
  645 |                     "Failed to update tags: " + std::string(e.what()));
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  646 |                 return {
      |                 ~~~~~~~~    
  647 |                     {"success", false},
      |                     ~~~~~~~~~~~~~~~~~~~
  648 |                     {"error", e.what()},
      |                     ~~~~~~~~~~~~~~~~~~~~
  649 |                     {"error_code", "UPDATE_FAILED"}
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  650 |                 };
      |                 ~~          
  651 |             }
      |             ~               
  652 |         },
      |         ~~                  
  653 |         "Update file tags"
      |         ~~~~~~~~~~~~~~~~~~  
  654 |     );
      |     ~                       
/home/pi/midiMind/backend/src/api/../core/commands/CommandFactory.h:85:10: note: candidate: ‘void midiMind::CommandFactory::registerCommand(const std::string&, CommandExecutor)’
   85 |     void registerCommand(const std::string& name, CommandExecutor executor) {
      |          ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/../core/commands/CommandFactory.h:85:10: note:   candidate expects 2 arguments, 3 provided
/home/pi/midiMind/backend/src/api/../core/commands/CommandFactory.h:103:10: note: candidate: ‘void midiMind::CommandFactory::registerCommand(const std::string&, std::shared_ptr<midiMind::ICommand>)’
  103 |     void registerCommand(const std::string& name, std::shared_ptr<ICommand> command) {
      |          ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/../core/commands/CommandFactory.h:103:10: note:   candidate expects 2 arguments, 3 provided
/home/pi/midiMind/backend/src/api/commands/files.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/files.cpp:685:45: error: ‘using std::__shared_ptr_access<midiMind::MidiFileManager, __gnu_cxx::_S_atomic, false, false>::element_type = class midiMind::MidiFileManager’ {aka ‘class midiMind::MidiFileManager’} has no member named ‘getById’
  685 |                 auto fileOpt = fileManager->getById(fileId);
      |                                             ^~~~~~~
/home/pi/midiMind/backend/src/api/commands/files.cpp: In function ‘void midiMind::registerFileCommands(CommandFactory&, std::shared_ptr<MidiFileManager>, std::shared_ptr<Database>)’:
/home/pi/midiMind/backend/src/api/commands/files.cpp:659:28: error: no matching function for call to ‘midiMind::CommandFactory::registerCommand(const char [19], midiMind::registerFileCommands(CommandFactory&, std::shared_ptr<MidiFileManager>, std::shared_ptr<Database>)::<lambda(const midiMind::json&)>, const char [19])’
  659 |     factory.registerCommand("files.updateRating",
      |     ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~
  660 |         [fileManager](const json& params) -> json {
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  661 |             Logger::debug("FileAPI", "Updating rating...");
      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  662 | 
      |                             
  663 |             try {
      |             ~~~~~           
  664 |                 if (!params.contains("file_id") || !params.contains("rating")) {
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  665 |                     return {
      |                     ~~~~~~~~
  666 |                         {"success", false},
      |                         ~~~~~~~~~~~~~~~~~~~
  667 |                         {"error", "Missing file_id or rating parameter"}
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  668 |                     };
      |                     ~~      
  669 |                 }
      |                 ~           
  670 | 
      |                             
  671 |                 std::string fileId = params["file_id"];
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  672 |                 int rating = params["rating"];
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  673 | 
      |                             
  674 |                 // Valider la note (0-5)
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~
  675 |                 if (rating < 0 || rating > 5) {
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  676 |                     return {
      |                     ~~~~~~~~
  677 |                         {"success", false},
      |                         ~~~~~~~~~~~~~~~~~~~
  678 |                         {"error", "Rating must be between 0 and 5"},
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  679 |                         {"error_code", "INVALID_RATING"}
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  680 |                     };
      |                     ~~      
  681 |                 }
      |                 ~           
  682 | 
      |                             
  683 |                 // Vérifier que le fichier existe
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  684 |                 // ✅ CORRECTION: getFileMetadata() → getById()
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  685 |                 auto fileOpt = fileManager->getById(fileId);
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  686 |                 if (!fileOpt.has_value()) {
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  687 |                     return {
      |                     ~~~~~~~~
  688 |                         {"success", false},
      |                         ~~~~~~~~~~~~~~~~~~~
  689 |                         {"error", "File not found"},
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  690 |                         {"error_code", "FILE_NOT_FOUND"}
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  691 |                     };
      |                     ~~      
  692 |                 }
      |                 ~           
  693 | 
      |                             
  694 |                 bool success = fileManager->updateRating(fileId, rating);
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  695 | 
      |                             
  696 |                 if (!success) {
      |                 ~~~~~~~~~~~~~~~
  697 |                     return {
      |                     ~~~~~~~~
  698 |                         {"success", false},
      |                         ~~~~~~~~~~~~~~~~~~~
  699 |                         {"error", "Failed to update rating"},
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  700 |                         {"error_code", "UPDATE_FAILED"}
      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  701 |                     };
      |                     ~~      
  702 |                 }
      |                 ~           
  703 | 
      |                             
  704 |                 Logger::info("FileAPI", "✓ Rating updated");
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  705 | 
      |                             
  706 |                 return {
      |                 ~~~~~~~~    
  707 |                     {"success", true},
      |                     ~~~~~~~~~~~~~~~~~~
  708 |                     {"message", "Rating updated successfully"}
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  709 |                 };
      |                 ~~          
  710 | 
      |                             
  711 |             } catch (const std::exception& e) {
      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  712 |                 Logger::error("FileAPI",
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~
  713 |                     "Failed to update rating: " + std::string(e.what()));
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  714 |                 return {
      |                 ~~~~~~~~    
  715 |                     {"success", false},
      |                     ~~~~~~~~~~~~~~~~~~~
  716 |                     {"error", e.what()},
      |                     ~~~~~~~~~~~~~~~~~~~~
  717 |                     {"error_code", "UPDATE_FAILED"}
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  718 |                 };
      |                 ~~          
  719 |             }
      |             ~               
  720 |         },
      |         ~~                  
  721 |         "Update file rating"
      |         ~~~~~~~~~~~~~~~~~~~~
  722 |     );
      |     ~                       
/home/pi/midiMind/backend/src/api/../core/commands/CommandFactory.h:85:10: note: candidate: ‘void midiMind::CommandFactory::registerCommand(const std::string&, CommandExecutor)’
   85 |     void registerCommand(const std::string& name, CommandExecutor executor) {
      |          ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/../core/commands/CommandFactory.h:85:10: note:   candidate expects 2 arguments, 3 provided
/home/pi/midiMind/backend/src/api/../core/commands/CommandFactory.h:103:10: note: candidate: ‘void midiMind::CommandFactory::registerCommand(const std::string&, std::shared_ptr<midiMind::ICommand>)’
  103 |     void registerCommand(const std::string& name, std::shared_ptr<ICommand> command) {
      |          ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/../core/commands/CommandFactory.h:103:10: note:   candidate expects 2 arguments, 3 provided
In file included from /home/pi/midiMind/backend/src/api/CommandProcessorV2.cpp:52:
/home/pi/midiMind/backend/src/api/commands/system.cpp: In function ‘midiMind::json midiMind::getDiskSpace()’:
/home/pi/midiMind/backend/src/api/commands/system.cpp:113:19: error: aggregate ‘midiMind::getDiskSpace()::statfs diskInfo’ has incomplete type and cannot be defined
  113 |     struct statfs diskInfo;
      |                   ^~~~~~~~
/home/pi/midiMind/backend/src/api/commands/system.cpp:114:46: error: invalid use of incomplete type ‘struct midiMind::getDiskSpace()::statfs’
  114 |     if (statfs("/home/pi/MidiMind", &diskInfo) != 0) {
      |                                              ^
/home/pi/midiMind/backend/src/api/commands/system.cpp:113:12: note: forward declaration of ‘struct midiMind::getDiskSpace()::statfs’
  113 |     struct statfs diskInfo;
      |            ^~~~~~
/home/pi/midiMind/backend/src/api/commands/system.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/system.cpp:198:32: error: aggregate ‘midiMind::registerSystemCommands(CommandFactory&)::<lambda(const midiMind::json&)>::utsname systemInfo’ has incomplete type and cannot be defined
  198 |                 struct utsname systemInfo;
      |                                ^~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/system.cpp:199:17: error: ‘uname’ was not declared in this scope; did you mean ‘tzname’?
  199 |                 uname(&systemInfo);
      |                 ^~~~~
      |                 tzname
/home/pi/midiMind/backend/src/api/commands/system.cpp:224:17: error: could not convert ‘{{"success", true}, {"data", {{"application", {{"name", "MidiMind"}, {"version", "3.0.3"}, {"build_date", "Oct 16 2025"}, {"build_time", "14:12:54"}}}, {"system", {{"os", <expression error>}, {"release", <expression error>}, {"version", <expression error>}, {"machine", <expression error>}, {"hostname", <expression error>}}}, {"hardware", {{"model", "Raspberry Pi"}, {"cpu_cores", std::thread::hardware_concurrency()}, {"memory_total_mb", midiMind::getMemoryUsage()().nlohmann::json_abi_v3_11_3::basic_json<>::operator[]<const char>(((const char*)"total_mb"))}}}, {"network", midiMind::getNetworkInfo()()}}}}’ from ‘<brace-enclosed initializer list>’ to ‘midiMind::json’ {aka ‘nlohmann::json_abi_v3_11_3::basic_json<>’}
  224 |                 };
      |                 ^
      |                 |
      |                 <brace-enclosed initializer list>
In file included from /home/pi/midiMind/backend/src/api/commands/editor.cpp:32,
                 from /home/pi/midiMind/backend/src/api/CommandProcessorV2.cpp:53:
/home/pi/midiMind/backend/src/api/commands/../editor/EditorState.h: At global scope:
/home/pi/midiMind/backend/src/api/commands/../editor/EditorState.h:305:26: error: field ‘undoStack_’ has incomplete type ‘std::deque<midiMind::Snapshot>’
  305 |     std::deque<Snapshot> undoStack_;        // Stack undo
      |                          ^~~~~~~~~~
/usr/include/c++/14/bits/stl_deque.h:788:11: note: declaration of ‘class std::deque<midiMind::Snapshot>’
  788 |     class deque : protected _Deque_base<_Tp, _Alloc>
      |           ^~~~~
/home/pi/midiMind/backend/src/api/commands/../editor/EditorState.h:306:26: error: field ‘redoStack_’ has incomplete type ‘std::deque<midiMind::Snapshot>’
  306 |     std::deque<Snapshot> redoStack_;        // Stack redo
      |                          ^~~~~~~~~~
/usr/include/c++/14/bits/stl_deque.h:788:11: note: declaration of ‘class std::deque<midiMind::Snapshot>’
  788 |     class deque : protected _Deque_base<_Tp, _Alloc>
      |           ^~~~~
/home/pi/midiMind/backend/src/api/commands/editor.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/editor.cpp:192:49: error: ‘using std::__shared_ptr_access<midiMind::MidiFileManager, __gnu_cxx::_S_atomic, false, false>::element_type = class midiMind::MidiFileManager’ {aka ‘class midiMind::MidiFileManager’} has no member named ‘loadAsJsonMidi’
  192 |                 auto jsonMidiOpt = fileManager->loadAsJsonMidi(fileId);
      |                                                 ^~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/editor.cpp:205:53: error: ‘using std::__shared_ptr_access<midiMind::MidiFileManager, __gnu_cxx::_S_atomic, false, false>::element_type = class midiMind::MidiFileManager’ {aka ‘class midiMind::MidiFileManager’} has no member named ‘getFilePath’; did you mean ‘getFileByPath’?
  205 |                 std::string filepath = fileManager->getFilePath(fileId);
      |                                                     ^~~~~~~~~~~
      |                                                     getFileByPath
In file included from /home/pi/midiMind/backend/src/api/CommandProcessorV2.cpp:55:
/home/pi/midiMind/backend/src/api/commands/processing.cpp: In function ‘bool midiMind::stringToProcessorType(const std::string&, ProcessorType&)’:
/home/pi/midiMind/backend/src/api/commands/processing.cpp:51:34: error: ‘FILTER’ is not a member of ‘midiMind::ProcessorType’
   51 |         outType = ProcessorType::FILTER;
      |                                  ^~~~~~
/home/pi/midiMind/backend/src/api/commands/processing.cpp:54:34: error: ‘VELOCITY_MAP’ is not a member of ‘midiMind::ProcessorType’; did you mean ‘VELOCITY’?
   54 |         outType = ProcessorType::VELOCITY_MAP;
      |                                  ^~~~~~~~~~~~
      |                                  VELOCITY
/home/pi/midiMind/backend/src/api/commands/processing.cpp:57:34: error: ‘QUANTIZE’ is not a member of ‘midiMind::ProcessorType’
   57 |         outType = ProcessorType::QUANTIZE;
      |                                  ^~~~~~~~
/home/pi/midiMind/backend/src/api/commands/processing.cpp:69:34: error: ‘CHANNEL_MAP’ is not a member of ‘midiMind::ProcessorType’
   69 |         outType = ProcessorType::CHANNEL_MAP;
      |                                  ^~~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/processing.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/processing.cpp:167:48: error: ‘using std::__shared_ptr_access<midiMind::ProcessorManager, __gnu_cxx::_S_atomic, false, false>::element_type = class midiMind::ProcessorManager’ {aka ‘class midiMind::ProcessorManager’} has no member named ‘addProcessor’; did you mean ‘createProcessor’?
  167 |                 bool added = processorManager->addProcessor(chainId, type, config);
      |                                                ^~~~~~~~~~~~
      |                                                createProcessor
/home/pi/midiMind/backend/src/api/commands/processing.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/processing.cpp:237:50: error: ‘using std::__shared_ptr_access<midiMind::ProcessorManager, __gnu_cxx::_S_atomic, false, false>::element_type = class midiMind::ProcessorManager’ {aka ‘class midiMind::ProcessorManager’} has no member named ‘removeProcessor’; did you mean ‘createProcessor’?
  237 |                 bool removed = processorManager->removeProcessor(chainId, processorIndex);
      |                                                  ^~~~~~~~~~~~~~~
      |                                                  createProcessor
/home/pi/midiMind/backend/src/api/commands/processing.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/processing.cpp:402:45: error: ‘using std::__shared_ptr_access<midiMind::MidiProcessor, __gnu_cxx::_S_atomic, false, false>::element_type = class midiMind::MidiProcessor’ {aka ‘class midiMind::MidiProcessor’} has no member named ‘enable’; did you mean ‘bool midiMind::MidiProcessor::enabled_’? (accessible via ‘bool midiMind::MidiProcessor::isEnabled() const’)
  402 |                 processors[processorIndex]->enable();
      |                                             ^~~~~~
      |                                             isEnabled()
/home/pi/midiMind/backend/src/api/commands/processing.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/processing.cpp:486:45: error: ‘using std::__shared_ptr_access<midiMind::MidiProcessor, __gnu_cxx::_S_atomic, false, false>::element_type = class midiMind::MidiProcessor’ {aka ‘class midiMind::MidiProcessor’} has no member named ‘disable’
  486 |                 processors[processorIndex]->disable();
      |                                             ^~~~~~~
/home/pi/midiMind/backend/src/api/commands/processing.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/processing.cpp:553:53: error: ‘using std::__shared_ptr_access<midiMind::ProcessorManager, __gnu_cxx::_S_atomic, false, false>::element_type = class midiMind::ProcessorManager’ {aka ‘class midiMind::ProcessorManager’} has no member named ‘configureProcessor’
  553 |                 bool configured = processorManager->configureProcessor(
      |                                                     ^~~~~~~~~~~~~~~~~~
In file included from /home/pi/midiMind/backend/src/api/CommandProcessorV2.cpp:58:
/home/pi/midiMind/backend/src/api/commands/logger.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/logger.cpp:67:53: error: ‘const struct midiMind::LoggerConfig’ has no member named ‘colorsEnabled’
   67 |                             {"colors", loggerConfig.colorsEnabled},
      |                                                     ^~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/logger.cpp:68:57: error: ‘const struct midiMind::LoggerConfig’ has no member named ‘timestampsEnabled’
   68 |                             {"timestamps", loggerConfig.timestampsEnabled},
      |                                                         ^~~~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/logger.cpp:69:55: error: ‘const struct midiMind::LoggerConfig’ has no member named ‘categoryEnabled’
   69 |                             {"category", loggerConfig.categoryEnabled}
      |                                                       ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/logger.cpp:72:54: error: ‘const struct midiMind::LoggerConfig’ has no member named ‘fileLoggingEnabled’
   72 |                             {"enabled", loggerConfig.fileLoggingEnabled},
      |                                                      ^~~~~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/logger.cpp:73:51: error: ‘const struct midiMind::LoggerConfig’ has no member named ‘filePath’
   73 |                             {"path", loggerConfig.filePath},
      |                                                   ^~~~~~~~
/home/pi/midiMind/backend/src/api/commands/logger.cpp:74:56: error: ‘const struct midiMind::LoggerConfig’ has no member named ‘maxFileSizeMB’; did you mean ‘maxFileSize’?
   74 |                             {"maxSizeMB", loggerConfig.maxFileSizeMB},
      |                                                        ^~~~~~~~~~~~~
      |                                                        maxFileSize
/home/pi/midiMind/backend/src/api/commands/logger.cpp:75:55: error: ‘const struct midiMind::LoggerConfig’ has no member named ‘maxFiles’; did you mean ‘maxFileSize’?
   75 |                             {"maxFiles", loggerConfig.maxFiles}
      |                                                       ^~~~~~~~
      |                                                       maxFileSize
/home/pi/midiMind/backend/src/api/commands/logger.cpp:77:57: error: ‘const struct midiMind::LoggerConfig’ has no member named ‘categoryFilter’
   77 |                         {"categoryFilter", loggerConfig.categoryFilter}
      |                                                         ^~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/logger.cpp:79:17: error: could not convert ‘{{"success", true}, {"data", {{"level", loggerConfig.midiMind::LoggerConfig::level}, {"console", {{"enabled", true}, {"colors", <expression error>}, {"timestamps", <expression error>}, {"category", <expression error>}}}, {"fileLogging", {{"enabled", <expression error>}, {"path", <expression error>}, {"maxSizeMB", <expression error>}, {"maxFiles", <expression error>}}}, {"categoryFilter", <expression error>}}}}’ from ‘<brace-enclosed initializer list>’ to ‘midiMind::json’ {aka ‘nlohmann::json_abi_v3_11_3::basic_json<>’}
   79 |                 };
      |                 ^
      |                 |
      |                 <brace-enclosed initializer list>
/home/pi/midiMind/backend/src/api/commands/logger.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/logger.cpp:131:30: error: ‘setGlobalLevel’ is not a member of ‘midiMind::Logger’
  131 |                 if (!Logger::setGlobalLevel(level)) {
      |                              ^~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/logger.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/logger.cpp:179:83: error: ‘struct midiMind::LoggerConfig’ has no member named ‘filePath’
  179 |                 std::string path = params.value("path", Config::instance().logger.filePath);
      |                                                                                   ^~~~~~~~
/home/pi/midiMind/backend/src/api/commands/logger.cpp:182:43: error: ‘struct midiMind::LoggerConfig’ has no member named ‘fileLoggingEnabled’
  182 |                 Config::instance().logger.fileLoggingEnabled = enabled;
      |                                           ^~~~~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/logger.cpp:183:43: error: ‘struct midiMind::LoggerConfig’ has no member named ‘filePath’
  183 |                 Config::instance().logger.filePath = path;
      |                                           ^~~~~~~~
/home/pi/midiMind/backend/src/api/commands/logger.cpp:188:51: error: ‘struct midiMind::LoggerConfig’ has no member named ‘maxFileSizeMB’; did you mean ‘maxFileSize’?
  188 |                         Config::instance().logger.maxFileSizeMB,
      |                                                   ^~~~~~~~~~~~~
      |                                                   maxFileSize
/home/pi/midiMind/backend/src/api/commands/logger.cpp:189:51: error: ‘struct midiMind::LoggerConfig’ has no member named ‘maxFiles’; did you mean ‘maxFileSize’?
  189 |                         Config::instance().logger.maxFiles)
      |                                                   ^~~~~~~~
      |                                                   maxFileSize
/home/pi/midiMind/backend/src/api/commands/logger.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/logger.cpp:253:24: error: ‘struct midiMind::LoggerConfig’ has no member named ‘fileLoggingEnabled’
  253 |                 config.fileLoggingEnabled = true;
      |                        ^~~~~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/logger.cpp:254:24: error: ‘struct midiMind::LoggerConfig’ has no member named ‘filePath’
  254 |                 config.filePath = path;
      |                        ^~~~~~~~
/home/pi/midiMind/backend/src/api/commands/logger.cpp:255:24: error: ‘struct midiMind::LoggerConfig’ has no member named ‘maxFileSizeMB’; did you mean ‘maxFileSize’?
  255 |                 config.maxFileSizeMB = maxSizeMB;
      |                        ^~~~~~~~~~~~~
      |                        maxFileSize
/home/pi/midiMind/backend/src/api/commands/logger.cpp:256:24: error: ‘struct midiMind::LoggerConfig’ has no member named ‘maxFiles’; did you mean ‘maxFileSize’?
  256 |                 config.maxFiles = maxFiles;
      |                        ^~~~~~~~
      |                        maxFileSize
/home/pi/midiMind/backend/src/api/commands/logger.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/logger.cpp:295:43: error: ‘struct midiMind::LoggerConfig’ has no member named ‘fileLoggingEnabled’
  295 |                 Config::instance().logger.fileLoggingEnabled = false;
      |                                           ^~~~~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/logger.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/logger.cpp:328:52: error: ‘getGlobalLevel’ is not a member of ‘midiMind::Logger’
  328 |                 std::string currentLevel = Logger::getGlobalLevel();
      |                                                    ^~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/logger.cpp:329:44: error: ‘isFileLoggingEnabled’ is not a member of ‘midiMind::Logger’
  329 |                 bool fileEnabled = Logger::isFileLoggingEnabled();
      |                                            ^~~~~~~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/logger.cpp:330:48: error: ‘getFilePath’ is not a member of ‘midiMind::Logger’
  330 |                 std::string filePath = Logger::getFilePath();
      |                                                ^~~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/logger.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/logger.cpp:430:51: error: ‘getFilePath’ is not a member of ‘midiMind::Logger’
  430 |                 std::string currentPath = Logger::getFilePath();
      |                                                   ^~~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/logger.cpp:431:43: error: ‘isFileLoggingEnabled’ is not a member of ‘midiMind::Logger’
  431 |                 bool wasEnabled = Logger::isFileLoggingEnabled();
      |                                           ^~~~~~~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/logger.cpp:432:59: error: ‘struct midiMind::LoggerConfig’ has no member named ‘maxFileSizeMB’; did you mean ‘maxFileSize’?
  432 |                 int maxSizeMB = Config::instance().logger.maxFileSizeMB;
      |                                                           ^~~~~~~~~~~~~
      |                                                           maxFileSize
/home/pi/midiMind/backend/src/api/commands/logger.cpp:433:58: error: ‘struct midiMind::LoggerConfig’ has no member named ‘maxFiles’; did you mean ‘maxFileSize’?
  433 |                 int maxFiles = Config::instance().logger.maxFiles;
      |                                                          ^~~~~~~~
      |                                                          maxFileSize
/home/pi/midiMind/backend/src/api/commands/loops.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/loops.cpp:88:38: error: ‘const class midiMind::MidiMindException’ has no member named ‘getCodeName’; did you mean ‘getCode’?
   88 |                     {"error_code", e.getCodeName()}
      |                                      ^~~~~~~~~~~
      |                                      getCode
/home/pi/midiMind/backend/src/api/commands/loops.cpp:89:17: error: could not convert ‘{{"success", false}, {"error", (& e)->midiMind::MidiMindException::what()}, {"error_code", <expression error>}}’ from ‘<brace-enclosed initializer list>’ to ‘midiMind::json’ {aka ‘nlohmann::json_abi_v3_11_3::basic_json<>’}
   89 |                 };
      |                 ^
      |                 |
      |                 <brace-enclosed initializer list>
/home/pi/midiMind/backend/src/api/commands/loops.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/loops.cpp:151:38: error: ‘const class midiMind::MidiMindException’ has no member named ‘getCodeName’; did you mean ‘getCode’?
  151 |                     {"error_code", e.getCodeName()}
      |                                      ^~~~~~~~~~~
      |                                      getCode
/home/pi/midiMind/backend/src/api/commands/loops.cpp:152:17: error: could not convert ‘{{"success", false}, {"error", (& e)->midiMind::MidiMindException::what()}, {"error_code", <expression error>}}’ from ‘<brace-enclosed initializer list>’ to ‘midiMind::json’ {aka ‘nlohmann::json_abi_v3_11_3::basic_json<>’}
  152 |                 };
      |                 ^
      |                 |
      |                 <brace-enclosed initializer list>
/home/pi/midiMind/backend/src/api/commands/loops.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/loops.cpp:205:38: error: ‘const class midiMind::MidiMindException’ has no member named ‘getCodeName’; did you mean ‘getCode’?
  205 |                     {"error_code", e.getCodeName()}
      |                                      ^~~~~~~~~~~
      |                                      getCode
/home/pi/midiMind/backend/src/api/commands/loops.cpp:206:17: error: could not convert ‘{{"success", false}, {"error", (& e)->midiMind::MidiMindException::what()}, {"error_code", <expression error>}}’ from ‘<brace-enclosed initializer list>’ to ‘midiMind::json’ {aka ‘nlohmann::json_abi_v3_11_3::basic_json<>’}
  206 |                 };
      |                 ^
      |                 |
      |                 <brace-enclosed initializer list>
/home/pi/midiMind/backend/src/api/commands/loops.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/loops.cpp:265:38: error: ‘const class midiMind::MidiMindException’ has no member named ‘getCodeName’; did you mean ‘getCode’?
  265 |                     {"error_code", e.getCodeName()}
      |                                      ^~~~~~~~~~~
      |                                      getCode
/home/pi/midiMind/backend/src/api/commands/loops.cpp:266:17: error: could not convert ‘{{"success", false}, {"error", (& e)->midiMind::MidiMindException::what()}, {"error_code", <expression error>}}’ from ‘<brace-enclosed initializer list>’ to ‘midiMind::json’ {aka ‘nlohmann::json_abi_v3_11_3::basic_json<>’}
  266 |                 };
      |                 ^
      |                 |
      |                 <brace-enclosed initializer list>
/home/pi/midiMind/backend/src/api/commands/loops.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/loops.cpp:322:38: error: ‘const class midiMind::MidiMindException’ has no member named ‘getCodeName’; did you mean ‘getCode’?
  322 |                     {"error_code", e.getCodeName()}
      |                                      ^~~~~~~~~~~
      |                                      getCode
/home/pi/midiMind/backend/src/api/commands/loops.cpp:323:17: error: could not convert ‘{{"success", false}, {"error", (& e)->midiMind::MidiMindException::what()}, {"error_code", <expression error>}}’ from ‘<brace-enclosed initializer list>’ to ‘midiMind::json’ {aka ‘nlohmann::json_abi_v3_11_3::basic_json<>’}
  323 |                 };
      |                 ^
      |                 |
      |                 <brace-enclosed initializer list>
/home/pi/midiMind/backend/src/api/commands/loops.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/loops.cpp:363:38: error: ‘const class midiMind::MidiMindException’ has no member named ‘getCodeName’; did you mean ‘getCode’?
  363 |                     {"error_code", e.getCodeName()}
      |                                      ^~~~~~~~~~~
      |                                      getCode
/home/pi/midiMind/backend/src/api/commands/loops.cpp:364:17: error: could not convert ‘{{"success", false}, {"error", (& e)->midiMind::MidiMindException::what()}, {"error_code", <expression error>}}’ from ‘<brace-enclosed initializer list>’ to ‘midiMind::json’ {aka ‘nlohmann::json_abi_v3_11_3::basic_json<>’}
  364 |                 };
      |                 ^
      |                 |
      |                 <brace-enclosed initializer list>
/home/pi/midiMind/backend/src/api/commands/loops.cpp: At global scope:
/home/pi/midiMind/backend/src/api/commands/loops.cpp:391:25: error: expected initializer before ‘EventEmitter’
  391 | class LoopModel extends EventEmitter {
      |                         ^~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/loops.cpp:1109:1: error: expected unqualified-id before ‘if’
 1109 | if (typeof module !== 'undefined' && module.exports) {
      | ^~
/home/pi/midiMind/backend/src/api/commands/loops.cpp:1113:2: error: expected unqualified-id before ‘/’ token
 1113 | */
      |  ^
In file included from /home/pi/midiMind/backend/src/api/CommandProcessorV2.cpp:62:
/home/pi/midiMind/backend/src/api/commands/instruments.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/instruments.cpp:110:47: error: ‘using std::__shared_ptr_access<midiMind::MidiDeviceManager, __gnu_cxx::_S_atomic, false, false>::element_type = class midiMind::MidiDeviceManager’ {aka ‘class midiMind::MidiDeviceManager’} has no member named ‘getDevices’; did you mean ‘getDevice’?
  110 |                 auto devices = deviceManager->getDevices();
      |                                               ^~~~~~~~~~
      |                                               getDevice
/home/pi/midiMind/backend/src/api/commands/instruments.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/instruments.cpp:182:47: error: ‘using std::__shared_ptr_access<midiMind::MidiDeviceManager, __gnu_cxx::_S_atomic, false, false>::element_type = class midiMind::MidiDeviceManager’ {aka ‘class midiMind::MidiDeviceManager’} has no member named ‘connectDevice’; did you mean ‘reconnectDevice’?
  182 |                 bool success = deviceManager->connectDevice(deviceId);
      |                                               ^~~~~~~~~~~~~
      |                                               reconnectDevice
/home/pi/midiMind/backend/src/api/commands/instruments.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/instruments.cpp:250:47: error: ‘using std::__shared_ptr_access<midiMind::MidiDeviceManager, __gnu_cxx::_S_atomic, false, false>::element_type = class midiMind::MidiDeviceManager’ {aka ‘class midiMind::MidiDeviceManager’} has no member named ‘disconnectDevice’; did you mean ‘reconnectDevice’?
  250 |                 bool success = deviceManager->disconnectDevice(deviceId);
      |                                               ^~~~~~~~~~~~~~~~
      |                                               reconnectDevice
/home/pi/midiMind/backend/src/api/commands/instruments.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/instruments.cpp:338:97: error: ‘struct midiMind::DeviceIdentity’ has no member named ‘manufacturerId’; did you mean ‘manufacturer’?
  338 |                         response["data"]["standard_identity"]["manufacturer_id"] = stdIdentity->manufacturerId;
      |                                                                                                 ^~~~~~~~~~~~~~
      |                                                                                                 manufacturer
/home/pi/midiMind/backend/src/api/commands/instruments.cpp:341:98: error: ‘struct midiMind::DeviceIdentity’ has no member named ‘versionMajor’
  341 |                         response["data"]["standard_identity"]["version"]["major"] = stdIdentity->versionMajor;
      |                                                                                                  ^~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/instruments.cpp:342:98: error: ‘struct midiMind::DeviceIdentity’ has no member named ‘versionMinor’
  342 |                         response["data"]["standard_identity"]["version"]["minor"] = stdIdentity->versionMinor;
      |                                                                                                  ^~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/instruments.cpp:343:98: error: ‘struct midiMind::DeviceIdentity’ has no member named ‘versionPatch’
  343 |                         response["data"]["standard_identity"]["version"]["patch"] = stdIdentity->versionPatch;
      |                                                                                                  ^~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/instruments.cpp:374:61: error: ‘struct midiMind::NoteMap’ has no member named ‘mappings’
  374 |                         for (const auto& mapping : noteMap->mappings) {
      |                                                             ^~~~~~~~
/home/pi/midiMind/backend/src/api/commands/instruments.cpp:375:50: error: no matching function for call to ‘nlohmann::json_abi_v3_11_3::basic_json<>::push_back(<brace-enclosed initializer list>)’
  375 |                             noteMapJson.push_back({
      |                             ~~~~~~~~~~~~~~~~~~~~~^~
  376 |                                 {"midi_note", mapping.midiNote},
      |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  377 |                                 {"physical_note", mapping.physicalNote},
      |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  378 |                                 {"name", mapping.name}
      |                                 ~~~~~~~~~~~~~~~~~~~~~~
  379 |                             });
      |                             ~~                    
/usr/include/nlohmann/json.hpp:3088:10: note: candidate: ‘void nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::push_back(nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>&&) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
 3088 |     void push_back(basic_json&& val)
      |          ^~~~~~~~~
/usr/include/nlohmann/json.hpp:3088:33: note:   no known conversion for argument 1 from ‘<brace-enclosed initializer list>’ to ‘nlohmann::json_abi_v3_11_3::basic_json<>&&’
 3088 |     void push_back(basic_json&& val)
      |                    ~~~~~~~~~~~~~^~~
/usr/include/nlohmann/json.hpp:3121:10: note: candidate: ‘void nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::push_back(const nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>&) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
 3121 |     void push_back(const basic_json& val)
      |          ^~~~~~~~~
/usr/include/nlohmann/json.hpp:3121:38: note:   no known conversion for argument 1 from ‘<brace-enclosed initializer list>’ to ‘const nlohmann::json_abi_v3_11_3::basic_json<>&’
 3121 |     void push_back(const basic_json& val)
      |                    ~~~~~~~~~~~~~~~~~~^~~
/usr/include/nlohmann/json.hpp:3153:10: note: candidate: ‘void nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::push_back(const typename object_t::value_type&) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void; typename object_t::value_type = std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_3::basic_json<> >; object_t = std::map<std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_3::basic_json<>, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_3::basic_json<> > > >]’
 3153 |     void push_back(const typename object_t::value_type& val)
      |          ^~~~~~~~~
/usr/include/nlohmann/json.hpp:3153:57: note:   no known conversion for argument 1 from ‘<brace-enclosed initializer list>’ to ‘const std::map<std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_3::basic_json<>, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_3::basic_json<> > > >::value_type&’ {aka ‘const std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_3::basic_json<> >&’}
 3153 |     void push_back(const typename object_t::value_type& val)
      |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
/usr/include/nlohmann/json.hpp:3184:10: note: candidate: ‘void nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::push_back(initializer_list_t) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void; initializer_list_t = std::initializer_list<nlohmann::json_abi_v3_11_3::detail::json_ref<nlohmann::json_abi_v3_11_3::basic_json<> > >]’
 3184 |     void push_back(initializer_list_t init)
      |          ^~~~~~~~~
/usr/include/nlohmann/json.hpp:3184:39: note:   no known conversion for argument 1 from ‘<brace-enclosed initializer list>’ to ‘nlohmann::json_abi_v3_11_3::basic_json<>::initializer_list_t’ {aka ‘std::initializer_list<nlohmann::json_abi_v3_11_3::detail::json_ref<nlohmann::json_abi_v3_11_3::basic_json<> > >’}
 3184 |     void push_back(initializer_list_t init)
      |                    ~~~~~~~~~~~~~~~~~~~^~~~
/home/pi/midiMind/backend/src/api/commands/instruments.cpp:390:55: error: ‘struct midiMind::CCCapabilities’ has no member named ‘controllers’
  390 |                         for (const auto& cc : ccCaps->controllers) {
      |                                                       ^~~~~~~~~~~
/home/pi/midiMind/backend/src/api/commands/instruments.cpp:391:45: error: no matching function for call to ‘nlohmann::json_abi_v3_11_3::basic_json<>::push_back(<brace-enclosed initializer list>)’
  391 |                             ccJson.push_back({
      |                             ~~~~~~~~~~~~~~~~^~
  392 |                                 {"cc_number", cc.ccNumber},
      |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  393 |                                 {"name", cc.name},
      |                                 ~~~~~~~~~~~~~~~~~~
  394 |                                 {"min", cc.minValue},
      |                                 ~~~~~~~~~~~~~~~~~~~~~
  395 |                                 {"max", cc.maxValue},
      |                                 ~~~~~~~~~~~~~~~~~~~~~
  396 |                                 {"default", cc.defaultValue}
      |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  397 |                             });
      |                             ~~               
/usr/include/nlohmann/json.hpp:3088:10: note: candidate: ‘void nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::push_back(nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>&&) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
 3088 |     void push_back(basic_json&& val)
      |          ^~~~~~~~~
/usr/include/nlohmann/json.hpp:3088:33: note:   no known conversion for argument 1 from ‘<brace-enclosed initializer list>’ to ‘nlohmann::json_abi_v3_11_3::basic_json<>&&’
 3088 |     void push_back(basic_json&& val)
      |                    ~~~~~~~~~~~~~^~~
/usr/include/nlohmann/json.hpp:3121:10: note: candidate: ‘void nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::push_back(const nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>&) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
 3121 |     void push_back(const basic_json& val)
      |          ^~~~~~~~~
/usr/include/nlohmann/json.hpp:3121:38: note:   no known conversion for argument 1 from ‘<brace-enclosed initializer list>’ to ‘const nlohmann::json_abi_v3_11_3::basic_json<>&’
 3121 |     void push_back(const basic_json& val)
      |                    ~~~~~~~~~~~~~~~~~~^~~
/usr/include/nlohmann/json.hpp:3153:10: note: candidate: ‘void nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::push_back(const typename object_t::value_type&) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void; typename object_t::value_type = std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_3::basic_json<> >; object_t = std::map<std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_3::basic_json<>, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_3::basic_json<> > > >]’
 3153 |     void push_back(const typename object_t::value_type& val)
      |          ^~~~~~~~~
/usr/include/nlohmann/json.hpp:3153:57: note:   no known conversion for argument 1 from ‘<brace-enclosed initializer list>’ to ‘const std::map<std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_3::basic_json<>, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_3::basic_json<> > > >::value_type&’ {aka ‘const std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_3::basic_json<> >&’}
 3153 |     void push_back(const typename object_t::value_type& val)
      |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
/usr/include/nlohmann/json.hpp:3184:10: note: candidate: ‘void nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::push_back(initializer_list_t) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void; initializer_list_t = std::initializer_list<nlohmann::json_abi_v3_11_3::detail::json_ref<nlohmann::json_abi_v3_11_3::basic_json<> > >]’
 3184 |     void push_back(initializer_list_t init)
      |          ^~~~~~~~~
/usr/include/nlohmann/json.hpp:3184:39: note:   no known conversion for argument 1 from ‘<brace-enclosed initializer list>’ to ‘nlohmann::json_abi_v3_11_3::basic_json<>::initializer_list_t’ {aka ‘std::initializer_list<nlohmann::json_abi_v3_11_3::detail::json_ref<nlohmann::json_abi_v3_11_3::basic_json<> > >’}
 3184 |     void push_back(initializer_list_t init)
      |                    ~~~~~~~~~~~~~~~~~~~^~~~
/home/pi/midiMind/backend/src/api/commands/instruments.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/instruments.cpp:539:43: error: ‘using std::__shared_ptr_access<midiMind::SysExHandler, __gnu_cxx::_S_atomic, false, false>::element_type = class midiMind::SysExHandler’ {aka ‘class midiMind::SysExHandler’} has no member named ‘requestNoteMap’; did you mean ‘getNoteMap’?
  539 |                 bool sent = sysExHandler->requestNoteMap(deviceId);
      |                                           ^~~~~~~~~~~~~~
      |                                           getNoteMap
/home/pi/midiMind/backend/src/api/commands/instruments.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/commands/instruments.cpp:616:43: error: ‘using std::__shared_ptr_access<midiMind::SysExHandler, __gnu_cxx::_S_atomic, false, false>::element_type = class midiMind::SysExHandler’ {aka ‘class midiMind::SysExHandler’} has no member named ‘requestCCCapabilities’; did you mean ‘getCCCapabilities’?
  616 |                 bool sent = sysExHandler->requestCCCapabilities(deviceId);
      |                                           ^~~~~~~~~~~~~~~~~~~~~
      |                                           getCCCapabilities
/home/pi/midiMind/backend/src/api/CommandProcessorV2.cpp: In member function ‘midiMind::json midiMind::CommandProcessorV2::processCommand(const std::string&)’:
/home/pi/midiMind/backend/src/api/CommandProcessorV2.cpp:299:23: error: ‘class midiMind::CommandFactory’ has no member named ‘hasCommand’; did you mean ‘listCommands’?
  299 |         if (!factory_.hasCommand(commandName)) {
      |                       ^~~~~~~~~~
      |                       listCommands
/home/pi/midiMind/backend/src/api/CommandProcessorV2.cpp:323:22: error: ISO C++ forbids declaration of ‘CommandException’ with no type [-fpermissive]
  323 |         catch (const CommandException& e) {
      |                      ^~~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/CommandProcessorV2.cpp:323:38: error: expected ‘)’ before ‘&’ token
  323 |         catch (const CommandException& e) {
      |               ~                      ^
      |                                      )
/home/pi/midiMind/backend/src/api/CommandProcessorV2.cpp:323:38: error: expected ‘{’ before ‘&’ token
/home/pi/midiMind/backend/src/api/CommandProcessorV2.cpp:323:40: error: ‘e’ was not declared in this scope
  323 |         catch (const CommandException& e) {
      |                                        ^
/home/pi/midiMind/backend/src/api/CommandProcessorV2.cpp:333:9: error: expected primary-expression before ‘catch’
  333 |         catch (const std::exception& e) {
      |         ^~~~~
/home/pi/midiMind/backend/src/api/CommandProcessorV2.cpp:364:1: warning: control reaches end of non-void function [-Wreturn-type]
  364 | }
      | ^
