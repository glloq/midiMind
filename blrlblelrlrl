/home/pi/midiMind/backend/src/midi/processing/ProcessorManager.cpp: In member function ‘void midiMind::ProcessorManager::resetStatistics()’:
/home/pi/midiMind/backend/src/midi/processing/ProcessorManager.cpp:582:16: warning: unused structured binding declaration [-Wunused-variable]
  582 |     for (auto& [id, chain] : chains_) {
      |                ^~~~~~~~~~~
[ 86%] Building CXX object CMakeFiles/midimind.dir/src/midi/sysex/SysExParser.cpp.o
[ 90%] Building CXX object CMakeFiles/midimind.dir/src/api/ApiServer.cpp.o
[ 93%] Building CXX object CMakeFiles/midimind.dir/src/api/CommandHandler.cpp.o
[ 96%] Building CXX object CMakeFiles/midimind.dir/src/api/MessageEnvelope.cpp.o
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:44:17: error: no declaration matches ‘midiMind::MessageEnvelope midiMind::MessageEnvelope::createRequest(const std::string&, const json&, int)’
   44 | MessageEnvelope MessageEnvelope::createRequest(const std::string& command,
      |                 ^~~~~~~~~~~~~~~
In file included from /home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:20:
/home/pi/midiMind/backend/src/api/MessageEnvelope.h:101:28: note: candidate is: ‘static midiMind::MessageEnvelope midiMind::MessageEnvelope::createRequest(const std::string&, const json&)’
  101 |     static MessageEnvelope createRequest(
      |                            ^~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.h:74:7: note: ‘class midiMind::MessageEnvelope’ defined here
   74 | class MessageEnvelope {
      |       ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp: In static member function ‘static midiMind::MessageEnvelope midiMind::MessageEnvelope::createSuccessResponse(const std::string&, const json&, int)’:
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:75:66: error: no match for ‘operator=’ (operand types are ‘std::optional<midiMind::protocol::Response>’ and ‘std::__detail::__unique_ptr_t<midiMind::protocol::Response>’)
   75 |     msg.response_ = std::make_unique<protocol::Response>(response);
      |                                                                  ^
In file included from /home/pi/midiMind/backend/src/api/MessageEnvelope.h:31:
/usr/include/c++/14/optional:844:9: note: candidate: ‘template<class _Up> std::enable_if_t<((bool)__and_v<std::__not_<std::is_same<std::optional<_Tp>, typename std::remove_cv<typename std::remove_reference<_Up>::type>::type> >, std::__not_<std::__and_<std::is_scalar<_Tp>, std::is_same<_Tp, typename std::decay<_Func>::type> > >, std::is_constructible<_T1, _U1>, std::is_assignable<_T1&, _U1> >), std::optional<_Tp>&> std::optional<_Tp>::operator=(_Up&&) [with _Tp = midiMind::protocol::Response]’
  844 |         operator=(_Up&& __u)
      |         ^~~~~~~~
/usr/include/c++/14/optional:844:9: note:   template argument deduction/substitution failed:
In file included from /usr/include/c++/14/bits/char_traits.h:50,
                 from /usr/include/c++/14/string:42,
                 from /home/pi/midiMind/backend/src/api/Protocol.h:22,
                 from /home/pi/midiMind/backend/src/api/MessageEnvelope.h:29:
/usr/include/c++/14/type_traits: In substitution of ‘template<bool _Cond, class _Tp> using std::enable_if_t = typename std::enable_if::type [with bool _Cond = false; _Tp = std::optional<midiMind::protocol::Response>&]’:
/usr/include/c++/14/optional:844:2:   required by substitution of ‘template<class _Up> std::enable_if_t<((bool)__and_v<std::__not_<std::is_same<std::optional<midiMind::protocol::Response>, typename std::remove_cv<typename std::remove_reference<_Tp>::type>::type> >, std::__not_<std::__and_<std::is_scalar<midiMind::protocol::Response>, std::is_same<midiMind::protocol::Response, typename std::decay<_Tp>::type> > >, std::is_constructible<midiMind::protocol::Response, _U1>, std::is_assignable<midiMind::protocol::Response&, _U1> >), std::optional<midiMind::protocol::Response>&> std::optional<midiMind::protocol::Response>::operator=(_Up&&) [with _Up = std::unique_ptr<midiMind::protocol::Response, std::default_delete<midiMind::protocol::Response> >]’
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:75:66:   required from here
   75 |     msg.response_ = std::make_unique<protocol::Response>(response);
      |                                                                  ^
/usr/include/c++/14/type_traits:2711:11: error: no type named ‘type’ in ‘struct std::enable_if<false, std::optional<midiMind::protocol::Response>&>’
 2711 |     using enable_if_t = typename enable_if<_Cond, _Tp>::type;
      |           ^~~~~~~~~~~
/usr/include/c++/14/optional:864:9: note: candidate: ‘template<class _Up> std::enable_if_t<((bool)__and_v<std::__not_<std::is_same<_T1, _U1> >, std::is_constructible<_T1, const _U1&>, std::is_assignable<_T1&, const _U1&>, std::__not_<std::__or_<std::is_constructible<_Tp, const std::optional<_Up>&>, std::is_constructible<_Tp, std::optional<_Up>&>, std::is_constructible<_Tp, const std::optional<_Up>&&>, std::is_constructible<_Tp, std::optional<_Up>&&>, std::is_convertible<const std::optional<_Up>&, _Tp>, std::is_convertible<std::optional<_Up>&, _Tp>, std::is_convertible<const std::optional<_Up>&&, _Tp>, std::is_convertible<std::optional<_Up>&&, _Tp> > >, std::__not_<std::__or_<std::is_assignable<_Tp&, const std::optional<_Up>&>, std::is_assignable<_Tp&, std::optional<_Up>&>, std::is_assignable<_Tp&, const std::optional<_Up>&&>, std::is_assignable<_Tp&, std::optional<_Up>&&> > > >), std::optional<_Tp>&> std::optional<_Tp>::operator=(const std::optional<_Up>&) [with _Tp = midiMind::protocol::Response]’
  864 |         operator=(const optional<_Up>& __u)
      |         ^~~~~~~~
/usr/include/c++/14/optional:864:9: note:   template argument deduction/substitution failed:
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:75:66: note:   ‘std::__detail::__unique_ptr_t<midiMind::protocol::Response>’ is not derived from ‘const std::optional<_Tp>’
   75 |     msg.response_ = std::make_unique<protocol::Response>(response);
      |                                                                  ^
/usr/include/c++/14/optional:890:9: note: candidate: ‘template<class _Up> std::enable_if_t<((bool)__and_v<std::__not_<std::is_same<_T1, _U1> >, std::is_constructible<_T1, _U1>, std::is_assignable<_T1&, _U1>, std::__not_<std::__or_<std::is_constructible<_Tp, const std::optional<_Up>&>, std::is_constructible<_Tp, std::optional<_Up>&>, std::is_constructible<_Tp, const std::optional<_Up>&&>, std::is_constructible<_Tp, std::optional<_Up>&&>, std::is_convertible<const std::optional<_Up>&, _Tp>, std::is_convertible<std::optional<_Up>&, _Tp>, std::is_convertible<const std::optional<_Up>&&, _Tp>, std::is_convertible<std::optional<_Up>&&, _Tp> > >, std::__not_<std::__or_<std::is_assignable<_Tp&, const std::optional<_Up>&>, std::is_assignable<_Tp&, std::optional<_Up>&>, std::is_assignable<_Tp&, const std::optional<_Up>&&>, std::is_assignable<_Tp&, std::optional<_Up>&&> > > >), std::optional<_Tp>&> std::optional<_Tp>::operator=(std::optional<_Up>&&) [with _Tp = midiMind::protocol::Response]’
  890 |         operator=(optional<_Up>&& __u)
      |         ^~~~~~~~
/usr/include/c++/14/optional:890:9: note:   template argument deduction/substitution failed:
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:75:66: note:   ‘std::__detail::__unique_ptr_t<midiMind::protocol::Response>’ is not derived from ‘std::optional<_Tp>’
   75 |     msg.response_ = std::make_unique<protocol::Response>(response);
      |                                                                  ^
/usr/include/c++/14/optional:830:7: note: candidate: ‘std::optional<_Tp>& std::optional<_Tp>::operator=(std::nullopt_t) [with _Tp = midiMind::protocol::Response]’
  830 |       operator=(nullopt_t) noexcept
      |       ^~~~~~~~
/usr/include/c++/14/optional:830:17: note:   no known conversion for argument 1 from ‘std::__detail::__unique_ptr_t<midiMind::protocol::Response>’ to ‘std::nullopt_t’
  830 |       operator=(nullopt_t) noexcept
      |                 ^~~~~~~~~
/usr/include/c++/14/optional:703:11: note: candidate: ‘constexpr std::optional<midiMind::protocol::Response>& std::optional<midiMind::protocol::Response>::operator=(const std::optional<midiMind::protocol::Response>&)’
  703 |     class optional
      |           ^~~~~~~~
/usr/include/c++/14/optional:703:11: note:   no known conversion for argument 1 from ‘std::__detail::__unique_ptr_t<midiMind::protocol::Response>’ to ‘const std::optional<midiMind::protocol::Response>&’
/usr/include/c++/14/optional:703:11: note: candidate: ‘constexpr std::optional<midiMind::protocol::Response>& std::optional<midiMind::protocol::Response>::operator=(std::optional<midiMind::protocol::Response>&&)’
/usr/include/c++/14/optional:703:11: note:   no known conversion for argument 1 from ‘std::__detail::__unique_ptr_t<midiMind::protocol::Response>’ to ‘std::optional<midiMind::protocol::Response>&&’
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp: At global scope:
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:80:17: error: no declaration matches ‘midiMind::MessageEnvelope midiMind::MessageEnvelope::createErrorResponse(const std::string&, midiMind::protocol::ErrorCode, const std::string&, const json&)’
   80 | MessageEnvelope MessageEnvelope::createErrorResponse(const std::string& requestId,
      |                 ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.h:132:28: note: candidate is: ‘static midiMind::MessageEnvelope midiMind::MessageEnvelope::createErrorResponse(const std::string&, midiMind::protocol::ErrorCode, const std::string&, const json&, bool)’
  132 |     static MessageEnvelope createErrorResponse(
      |                            ^~~~~~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.h:74:7: note: ‘class midiMind::MessageEnvelope’ defined here
   74 | class MessageEnvelope {
      |       ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:102:17: error: no declaration matches ‘midiMind::MessageEnvelope midiMind::MessageEnvelope::createEvent(const std::string&, const json&, midiMind::protocol::EventPriority, const std::string&)’
  102 | MessageEnvelope MessageEnvelope::createEvent(const std::string& name,
      |                 ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.h:151:28: note: candidate is: ‘static midiMind::MessageEnvelope midiMind::MessageEnvelope::createEvent(const std::string&, const json&, midiMind::protocol::EventPriority)’
  151 |     static MessageEnvelope createEvent(
      |                            ^~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.h:74:7: note: ‘class midiMind::MessageEnvelope’ defined here
   74 | class MessageEnvelope {
      |       ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:123:17: error: no declaration matches ‘midiMind::MessageEnvelope midiMind::MessageEnvelope::createError(midiMind::protocol::ErrorCode, const std::string&, const json&, bool, const std::string&)’
  123 | MessageEnvelope MessageEnvelope::createError(protocol::ErrorCode code,
      |                 ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.h:168:28: note: candidate is: ‘static midiMind::MessageEnvelope midiMind::MessageEnvelope::createError(midiMind::protocol::ErrorCode, const std::string&, const json&)’
  168 |     static MessageEnvelope createError(
      |                            ^~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.h:74:7: note: ‘class midiMind::MessageEnvelope’ defined here
   74 | class MessageEnvelope {
      |       ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:146:23: error: redefinition of ‘midiMind::protocol::MessageType midiMind::MessageEnvelope::getType() const’
  146 | protocol::MessageType MessageEnvelope::getType() const {
      |                       ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.h:270:27: note: ‘midiMind::protocol::MessageType midiMind::MessageEnvelope::getType() const’ previously defined here
  270 |     protocol::MessageType getType() const { return envelope_.type; }
      |                           ^~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:150:27: error: redefinition of ‘const midiMind::protocol::Envelope& midiMind::MessageEnvelope::getEnvelope() const’
  150 | const protocol::Envelope& MessageEnvelope::getEnvelope() const {
      |                           ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.h:240:31: note: ‘const midiMind::protocol::Envelope& midiMind::MessageEnvelope::getEnvelope() const’ previously defined here
  240 |     const protocol::Envelope& getEnvelope() const { return envelope_; }
      |                               ^~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:182:6: error: no declaration matches ‘bool midiMind::MessageEnvelope::hasRequest() const’
  182 | bool MessageEnvelope::hasRequest() const {
      |      ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:182:6: note: no functions named ‘bool midiMind::MessageEnvelope::hasRequest() const’
/home/pi/midiMind/backend/src/api/MessageEnvelope.h:74:7: note: ‘class midiMind::MessageEnvelope’ defined here
   74 | class MessageEnvelope {
      |       ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:186:6: error: no declaration matches ‘bool midiMind::MessageEnvelope::hasResponse() const’
  186 | bool MessageEnvelope::hasResponse() const {
      |      ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:186:6: note: no functions named ‘bool midiMind::MessageEnvelope::hasResponse() const’
/home/pi/midiMind/backend/src/api/MessageEnvelope.h:74:7: note: ‘class midiMind::MessageEnvelope’ defined here
   74 | class MessageEnvelope {
      |       ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:190:6: error: no declaration matches ‘bool midiMind::MessageEnvelope::hasEvent() const’
  190 | bool MessageEnvelope::hasEvent() const {
      |      ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:190:6: note: no functions named ‘bool midiMind::MessageEnvelope::hasEvent() const’
/home/pi/midiMind/backend/src/api/MessageEnvelope.h:74:7: note: ‘class midiMind::MessageEnvelope’ defined here
   74 | class MessageEnvelope {
      |       ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:194:6: error: no declaration matches ‘bool midiMind::MessageEnvelope::hasError() const’
  194 | bool MessageEnvelope::hasError() const {
      |      ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:194:6: note: no functions named ‘bool midiMind::MessageEnvelope::hasError() const’
/home/pi/midiMind/backend/src/api/MessageEnvelope.h:74:7: note: ‘class midiMind::MessageEnvelope’ defined here
   74 | class MessageEnvelope {
      |       ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/CommandHandler.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/CommandHandler.cpp:274:38: error: ‘const struct midiMind::MidiDeviceInfo’ has no member named ‘connected’
  274 |                 {"connected", device.connected}
      |                                      ^~~~~~~~~
/home/pi/midiMind/backend/src/api/CommandHandler.cpp:275:13: error: could not convert ‘{{"id", device.midiMind::MidiDeviceInfo::id}, {"name", device.midiMind::MidiDeviceInfo::name}, {"type", ((int)((midiMind::DeviceType)device.midiMind::MidiDeviceInfo::type))}, {"connected", <expression error>}}’ from ‘<brace-enclosed initializer list>’ to ‘json’ {aka ‘nlohmann::json_abi_v3_11_3::basic_json<>’}
  275 |             };
      |             ^
      |             |
      |             <brace-enclosed initializer list>
/home/pi/midiMind/backend/src/api/CommandHandler.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/CommandHandler.cpp:293:38: error: ‘const struct midiMind::MidiDeviceInfo’ has no member named ‘connected’
  293 |                 {"connected", device.connected}
      |                                      ^~~~~~~~~
/home/pi/midiMind/backend/src/api/CommandHandler.cpp:294:13: error: could not convert ‘{{"id", device.midiMind::MidiDeviceInfo::id}, {"name", device.midiMind::MidiDeviceInfo::name}, {"type", ((int)((midiMind::DeviceType)device.midiMind::MidiDeviceInfo::type))}, {"connected", <expression error>}}’ from ‘<brace-enclosed initializer list>’ to ‘json’ {aka ‘nlohmann::json_abi_v3_11_3::basic_json<>’}
  294 |             };
      |             ^
      |             |
      |             <brace-enclosed initializer list>
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:255:32: error: no declaration matches ‘std::optional<midiMind::MessageEnvelope> midiMind::MessageEnvelope::fromString(const std::string&)’
  255 | std::optional<MessageEnvelope> MessageEnvelope::fromString(const std::string& str) {
      |                                ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:255:32: note: no functions named ‘std::optional<midiMind::MessageEnvelope> midiMind::MessageEnvelope::fromString(const std::string&)’
/home/pi/midiMind/backend/src/api/MessageEnvelope.h:74:7: note: ‘class midiMind::MessageEnvelope’ defined here
   74 | class MessageEnvelope {
      |       ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:303:13: error: no declaration matches ‘std::string midiMind::MessageEnvelope::toString() const’
  303 | std::string MessageEnvelope::toString() const {
      |             ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/MessageEnvelope.cpp:303:13: note: no functions named ‘std::string midiMind::MessageEnvelope::toString() const’
/home/pi/midiMind/backend/src/api/MessageEnvelope.h:74:7: note: ‘class midiMind::MessageEnvelope’ defined here
   74 | class MessageEnvelope {
      |       ^~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/CommandHandler.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/CommandHandler.cpp:376:41: error: void value not ignored as it ought to be
  376 |         bool success = router_->addRoute(route);
      |                        ~~~~~~~~~~~~~~~~~^~~~~~~
/home/pi/midiMind/backend/src/api/CommandHandler.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/CommandHandler.cpp:400:18: error: ‘using std::__shared_ptr_access<midiMind::MidiRouter, __gnu_cxx::_S_atomic, false, false>::element_type = class midiMind::MidiRouter’ {aka ‘class midiMind::MidiRouter’} has no member named ‘enableRoute’
  400 |         router_->enableRoute(routeId);
      |                  ^~~~~~~~~~~
/home/pi/midiMind/backend/src/api/CommandHandler.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/CommandHandler.cpp:412:18: error: ‘using std::__shared_ptr_access<midiMind::MidiRouter, __gnu_cxx::_S_atomic, false, false>::element_type = class midiMind::MidiRouter’ {aka ‘class midiMind::MidiRouter’} has no member named ‘disableRoute’
  412 |         router_->disableRoute(routeId);
      |                  ^~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/CommandHandler.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/CommandHandler.cpp:548:17: error: ‘setGlobalLevel’ is not a member of ‘midiMind::Logger’
  548 |         Logger::setGlobalLevel(level);
      |                 ^~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/CommandHandler.cpp: In lambda function:
/home/pi/midiMind/backend/src/api/CommandHandler.cpp:555:39: error: ‘getGlobalLevelString’ is not a member of ‘midiMind::Logger’
  555 |         return json{{"level", Logger::getGlobalLevelString()}};
      |                                       ^~~~~~~~~~~~~~~~~~~~
/home/pi/midiMind/backend/src/api/CommandHandler.cpp:555:62: error: no matching function for call to ‘nlohmann::json_abi_v3_11_3::basic_json<>::basic_json(<brace-enclosed initializer list>)’
  555 |         return json{{"level", Logger::getGlobalLevelString()}};
      |                                                              ^
In file included from /home/pi/midiMind/backend/src/api/../midi/devices/../MidiMessage.h:33,
                 from /home/pi/midiMind/backend/src/api/../midi/devices/MidiDevice.h:30,
                 from /home/pi/midiMind/backend/src/api/../midi/devices/MidiDeviceManager.h:14,
                 from /home/pi/midiMind/backend/src/api/CommandHandler.h:30,
                 from /home/pi/midiMind/backend/src/api/CommandHandler.cpp:21:
/usr/include/nlohmann/json.hpp:1141:5: note: candidate: ‘template<class JsonRef, typename std::enable_if<nlohmann::json_abi_v3_11_3::detail::conjunction<nlohmann::json_abi_v3_11_3::detail::is_json_ref<JsonRef>, std::is_same<typename JsonRef::value_type, nlohmann::json_abi_v3_11_3::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long int, long unsigned int, double, std::allocator, nlohmann::json_abi_v3_11_3::adl_serializer, std::vector<unsigned char, std::allocator<unsigned char> >, void> > >::value, int>::type <anonymous> > nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json(const JsonRef&) [with typename std::enable_if<nlohmann::json_abi_v3_11_3::detail::conjunction<nlohmann::json_abi_v3_11_3::detail::is_json_ref<JsonRef>, std::is_same<typename JsonRef::value_type, nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass> > >::value, int>::type <anonymous> = JsonRef; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
 1141 |     basic_json(const JsonRef& ref) : basic_json(ref.moved_or_copied()) {}
      |     ^~~~~~~~~~
/usr/include/nlohmann/json.hpp:1141:5: note:   template argument deduction/substitution failed:
/home/pi/midiMind/backend/src/api/CommandHandler.cpp:555:62: note:   couldn’t deduce template parameter ‘JsonRef’
  555 |         return json{{"level", Logger::getGlobalLevelString()}};
      |                                                              ^
/usr/include/nlohmann/json.hpp:1032:5: note: candidate: ‘template<class InputIT, typename std::enable_if<(std::is_same<IterImpl, nlohmann::json_abi_v3_11_3::detail::iter_impl<nlohmann::json_abi_v3_11_3::basic_json<> > >::value || std::is_same<IterImpl, nlohmann::json_abi_v3_11_3::detail::iter_impl<const nlohmann::json_abi_v3_11_3::basic_json<> > >::value), int>::type <anonymous> > nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json(InputIT, InputIT) [with typename std::enable_if<(std::is_same<InputIT, nlohmann::json_abi_v3_11_3::detail::iter_impl<nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass> > >::value || std::is_same<InputIT, nlohmann::json_abi_v3_11_3::detail::iter_impl<const nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass> > >::value), int>::type <anonymous> = InputIT; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
 1032 |     basic_json(InputIT first, InputIT last)
      |     ^~~~~~~~~~
/usr/include/nlohmann/json.hpp:1032:5: note:   candidate expects 2 arguments, 1 provided
/usr/include/nlohmann/json.hpp:849:5: note: candidate: ‘template<class BasicJsonType, typename std::enable_if<(nlohmann::json_abi_v3_11_3::detail::is_basic_json<BasicJsonType>::value && (! std::is_same<nlohmann::json_abi_v3_11_3::basic_json<>, BasicJsonType>::value)), int>::type <anonymous> > nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json(const BasicJsonType&) [with typename std::enable_if<(nlohmann::json_abi_v3_11_3::detail::is_basic_json<BasicJsonType>::value && (! std::is_same<nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>, BasicJsonType>::value)), int>::type <anonymous> = BasicJsonType; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
  849 |     basic_json(const BasicJsonType& val)
      |     ^~~~~~~~~~
/usr/include/nlohmann/json.hpp:849:5: note:   template argument deduction/substitution failed:
/home/pi/midiMind/backend/src/api/CommandHandler.cpp:555:62: note:   couldn’t deduce template parameter ‘BasicJsonType’
  555 |         return json{{"level", Logger::getGlobalLevelString()}};
      |                                                              ^
/usr/include/nlohmann/json.hpp:835:5: note: candidate: ‘template<class CompatibleType, class U, typename std::enable_if<((! nlohmann::json_abi_v3_11_3::detail::is_basic_json<T>::value) && nlohmann::json_abi_v3_11_3::detail::is_compatible_type<nlohmann::json_abi_v3_11_3::basic_json<>, U>::value), int>::type <anonymous> > nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json(CompatibleType&&) [with U = CompatibleType; typename std::enable_if<((! nlohmann::json_abi_v3_11_3::detail::is_basic_json<U>::value) && nlohmann::json_abi_v3_11_3::detail::is_compatible_type<nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>, U>::value), int>::type <anonymous> = U; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
  835 |     basic_json(CompatibleType && val) noexcept(noexcept( // NOLINT(bugprone-forwarding-reference-overload,bugprone-exception-escape)
      |     ^~~~~~~~~~
/usr/include/nlohmann/json.hpp:835:5: note:   template argument deduction/substitution failed:
/home/pi/midiMind/backend/src/api/CommandHandler.cpp:555:62: note:   couldn’t deduce template parameter ‘CompatibleType’
  555 |         return json{{"level", Logger::getGlobalLevelString()}};
      |                                                              ^
/usr/include/nlohmann/json.hpp:1214:5: note: candidate: ‘nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json(nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>&&) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
 1214 |     basic_json(basic_json&& other) noexcept
      |     ^~~~~~~~~~
/usr/include/nlohmann/json.hpp:1214:29: note:   no known conversion for argument 1 from ‘<brace-enclosed initializer list>’ to ‘nlohmann::json_abi_v3_11_3::basic_json<>&&’
 1214 |     basic_json(basic_json&& other) noexcept
      |                ~~~~~~~~~~~~~^~~~~
/usr/include/nlohmann/json.hpp:1145:5: note: candidate: ‘nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json(const nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>&) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
 1145 |     basic_json(const basic_json& other)
      |     ^~~~~~~~~~
/usr/include/nlohmann/json.hpp:1145:34: note:   no known conversion for argument 1 from ‘<brace-enclosed initializer list>’ to ‘const nlohmann::json_abi_v3_11_3::basic_json<>&’
 1145 |     basic_json(const basic_json& other)
      |                ~~~~~~~~~~~~~~~~~~^~~~~
/usr/include/nlohmann/json.hpp:1020:5: note: candidate: ‘nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json(size_type, const nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>&) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void; size_type = long unsigned int]’
 1020 |     basic_json(size_type cnt, const basic_json& val):
      |     ^~~~~~~~~~
/usr/include/nlohmann/json.hpp:1020:5: note:   candidate expects 2 arguments, 1 provided
/usr/include/nlohmann/json.hpp:902:5: note: candidate: ‘nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json(initializer_list_t, bool, value_t) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void; initializer_list_t = std::initializer_list<nlohmann::json_abi_v3_11_3::detail::json_ref<nlohmann::json_abi_v3_11_3::basic_json<> > >; value_t = nlohmann::json_abi_v3_11_3::detail::value_t]’
  902 |     basic_json(initializer_list_t init,
      |     ^~~~~~~~~~
/usr/include/nlohmann/json.hpp:902:35: note:   no known conversion for argument 1 from ‘<brace-enclosed initializer list>’ to ‘nlohmann::json_abi_v3_11_3::basic_json<>::initializer_list_t’ {aka ‘std::initializer_list<nlohmann::json_abi_v3_11_3::detail::json_ref<nlohmann::json_abi_v3_11_3::basic_json<> > >’}
  902 |     basic_json(initializer_list_t init,
      |                ~~~~~~~~~~~~~~~~~~~^~~~
/usr/include/nlohmann/json.hpp:823:5: note: candidate: ‘nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json(std::nullptr_t) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void; std::nullptr_t = std::nullptr_t]’
  823 |     basic_json(std::nullptr_t = nullptr) noexcept // NOLINT(bugprone-exception-escape)
      |     ^~~~~~~~~~
/usr/include/nlohmann/json.hpp:823:16: note:   no known conversion for argument 1 from ‘<brace-enclosed initializer list>’ to ‘std::nullptr_t’
  823 |     basic_json(std::nullptr_t = nullptr) noexcept // NOLINT(bugprone-exception-escape)
      |                ^~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/nlohmann/json.hpp:815:5: note: candidate: ‘nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json(value_t) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void; value_t = nlohmann::json_abi_v3_11_3::detail::value_t]’
  815 |     basic_json(const value_t v)
      |     ^~~~~~~~~~
/usr/include/nlohmann/json.hpp:815:30: note:   no known conversion for argument 1 from ‘<brace-enclosed initializer list>’ to ‘nlohmann::json_abi_v3_11_3::basic_json<>::value_t’ {aka ‘nlohmann::json_abi_v3_11_3::detail::value_t’}
  815 |     basic_json(const value_t v)
      |                ~~~~~~~~~~~~~~^
/home/pi/midiMind/backend/src/api/CommandHandler.cpp: In member function ‘void midiMind::CommandHandler::registerLoggerCommands()’:
/home/pi/midiMind/backend/src/api/CommandHandler.cpp:554:40: error: cannot convert ‘midiMind::CommandHandler::registerLoggerCommands()::<lambda(const json&)>’ to ‘midiMind::CommandHandler::CommandFunction’ {aka ‘std::function<nlohmann::json_abi_v3_11_3::basic_json<>(const nlohmann::json_abi_v3_11_3::basic_json<>&)>’}
  554 |     registerCommand("logger.getLevel", [](const json& params) {
      |                                        ^~~~~~~~~~~~~~~~~~~~~~~~
      |                                        |
      |                                        midiMind::CommandHandler::registerLoggerCommands()::<lambda(const json&)>
  555 |         return json{{"level", Logger::getGlobalLevelString()}};
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  556 |     });
      |     ~                                   
/home/pi/midiMind/backend/src/api/CommandHandler.cpp:119:53: note:   initializing argument 2 of ‘void midiMind::CommandHandler::registerCommand(const std::string&, CommandFunction)’
  119 |                                     CommandFunction function) {
      |                                     ~~~~~~~~~~~~~~~~^~~~~~~~
make[2]: *** [CMakeFiles/midimind.dir/build.make:471: CMakeFiles/midimind.dir/src/api/MessageEnvelope.cpp.o] Error 1
make[2]: *** Waiting for unfinished jobs....
make[2]: *** [CMakeFiles/midimind.dir/build.make:457: CMakeFiles/midimind.dir/src/api/CommandHandler.cpp.o] Error 1
